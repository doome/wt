#!/usr/bin/perl

=pod

=head1 SYNOPSIS

wt - command line work log client

=head1 USAGE

    wt [-d DATE] HH:MM-HH:MM ISSUE COMMENT

=cut

## TODO
# date
# wt report, wt commit, wt start

use strict;
use warnings;
no warnings qw/experimental/;
use feature qw/say switch/;
use Getopt::Long;
use Pod::Usage;
use JSON qw/encode_json/;
use HTTP::Request;
use LWP::UserAgent;
use Term::ReadKey;
use Data::Dumper;

# TODO config
my $jira_base_url = "https://jira.uhusystems.com/jira";
my $url = "$jira_base_url/rest/tempo-timesheets/3/worklogs/";
my $user_name = 'juhasz.peter';

my $date_override;
GetOptions(
	"date=s" => \$date_override,
) or pod2usage();

pod2usage() unless @ARGV;

my ($start_time, $end_time);

for ($ARGV[0]) {
	when ([qw/start s/])   {pod2usage(); } # TODO
	when ([qw/commit ci/]) {pod2usage(); }
	when ([qw/report r/])  {pod2usage(); }
	when ([qw/add a/]) {
		my ($s, $e) = $ARGV[1] =~ /(\d*:?\d*:?\d*)-(\d*:?\d*:?\d*)/;
		pod2usage() if (not defined $s or not defined $e); # TODO - allowed once wt start is available
		my %t;
		@t{qw/H M S/} = split ':', $s;
		$start_time   = {%t};
		@t{qw/H M S/} = split ':', $e;
		$end_time     = {%t};

		my %project;
		($project{name}, $project{number}) = $ARGV[2] =~ /([\w_]+)-(\d+)/;
		die "Error: Invalid project name, must be in PROJECT-NUMBER format\n" if (not defined $project{name} or not defined $project{number});

		my $comment = $ARGV[3];
		die "Error: Comment is required\n" unless defined $comment;

		my $time_spent = time_spent($start_time, $end_time);

		# TODO -d date
		my $date_started = format_date(undef, $start_time);

		my $pw = get_pw();

		my $ojject = {

			issue => {
				#remainingEstimateSeconds => number,
				key => $project{name},
				projectId => $project{number},
			},
			comment => $comment,
			dateStarted => $date_started, #YYYY-MM-ddT00:00:00.000+0000
			timeSpentSeconds => $time_spent, #seconds
		};

		my $json = encode_json($ojject);
								
		my $req = HTTP::Request->new('POST', $url);
		$req->header('Content-Type' => 'application/json');
		$req->authorization_basic($user_name, $pw);
		$req->content($json);
		my $ua = LWP::UserAgent->new;
		my $response = $ua->request($req);
		
		if ( $response->is_success() ) {
			say "POST OK";
		}
		else {
			say Dumper $response;
		}

	}
}


###############

sub pad {
	($_[0] < 10) ? '0'.$_[0] : $_[0];
}

sub format_date {
	my ($date, $time) = @_;
	my @lt = localtime(time);
	if (not defined $date or ref $date ne "HASH") {
		$date = {Y => $lt[5]+1900, M => $lt[4]+1, D => $lt[3]};
	}
	if (not defined $time or ref $time ne "HASH") {
		$time = {H => $lt[2], M => $lt[1], S => $lt[0]};
	}

	my $res = (join "-", map { pad($date->{$_}) } qw/Y M D/)
			. 'T'
			. (join ":", map { pad($time->{$_}) } qw/H M S/)
			. ($lt[8] ? '+2000' : '+1000');
	return $res;
}

sub time_spent {
	my ($start, $end) = @_;
	my @lt = localtime(time);
	if (not defined $start or ref $start ne "HASH") {
		$start = {H => $lt[2], M => $lt[1], D => $lt[0]};
	}
	if (not defined $end or ref $end ne "HASH") {
		$end   = {H => $lt[2], M => $lt[1], D => $lt[0]};
	}

	$end->{M}   //= 0;
	$end->{S}   //= 0;
	$start->{M} //= 0;
	$start->{S} //= 0;

	my $e = $end->{H}   * 3600 + $end->{M}   * 60 + $end->{S};
	my $s = $start->{H} * 3600 + $start->{M} * 60 + $start->{S};
	return abs($e - $s);
}

sub get_pw {
	ReadMode 2;
	print "JIRA Password:";
	my $pw = <STDIN>;
	print "\n";
	ReadMode 0;
	return $pw;
}
